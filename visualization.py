import matplotlib.pyplot as plt


def plot_training_curves(history, save_path='training_curves.png'):
    fig, axes = plt.subplots(2, 3, figsize=(18, 10))
    fig.suptitle('Training Progress - Comprehensive Metrics', fontsize=16)
    epochs = range(1, len(history['train_loss']) + 1)
    axes[0, 0].plot(epochs, history['train_loss'], 'b-', label='Train Loss', linewidth=2)
    axes[0, 0].plot(epochs, history['val_loss'], 'r-', label='Val Loss', linewidth=2)
    axes[0, 0].set_title('Loss Curves')
    axes[0, 0].set_xlabel('Epoch')
    axes[0, 0].set_ylabel('Loss')
    axes[0, 0].legend()
    axes[0, 0].grid(True, alpha=0.3)
    axes[0, 1].plot(epochs, history['train_perplexity'], 'b-', label='Train PPL', linewidth=2)
    axes[0, 1].plot(epochs, history['val_perplexity'], 'r-', label='Val PPL', linewidth=2)
    axes[0, 1].set_title('Perplexity Curves')
    axes[0, 1].set_xlabel('Epoch')
    axes[0, 1].set_ylabel('Perplexity')
    axes[0, 1].legend()
    axes[0, 1].grid(True, alpha=0.3)
    axes[0, 2].plot(epochs, history['learning_rate'], 'g-', linewidth=2)
    axes[0, 2].set_title('Learning Rate Schedule')
    axes[0, 2].set_xlabel('Epoch')
    axes[0, 2].set_ylabel('Learning Rate')
    axes[0, 2].set_yscale('log')
    axes[0, 2].grid(True, alpha=0.3)
    axes[1, 0].plot(epochs, history['val_bleu'], 'purple', linewidth=2, marker='o', markersize=4)
    axes[1, 0].set_title('BLEU Score')
    axes[1, 0].set_xlabel('Epoch')
    axes[1, 0].set_ylabel('BLEU Score')
    axes[1, 0].grid(True, alpha=0.3)
    axes[1, 2].plot(epochs, history['val_meteor'], 'brown', linewidth=2, marker='^', markersize=4)
    axes[1, 2].set_title('METEOR Score')
    axes[1, 2].set_xlabel('Epoch')
    axes[1, 2].set_ylabel('METEOR Score')
    axes[1, 2].grid(True, alpha=0.3)
    plt.tight_layout()
    plt.savefig(save_path, dpi=300, bbox_inches='tight')
    plt.show()


def print_final_metrics_summary(history):
    print("\n" + "=" * 60)
    print("FINAL TRAINING SUMMARY")
    print("=" * 60)
    final_epoch = len(history['train_loss'])
    print(f"Training completed after {final_epoch} epochs")
    print(f"Best validation loss: {min(history['val_loss']):.4f}")
    print(f"Final validation loss: {history['val_loss'][-1]:.4f}")
    print(f"Final validation perplexity: {history['val_perplexity'][-1]:.2f}")
    print("\nFinal Validation Metrics:")
    print(f"  BLEU Score: {history['val_bleu'][-1]:.4f}")
    print(f"  METEOR Score: {history['val_meteor'][-1]:.4f}")
    if history['val_bleu']:
        print(f"\nBest Validation Metrics:")
        print(f"  Best BLEU Score: {max(history['val_bleu']):.4f}")
        print(f"  Best METEOR Score: {max(history['val_meteor']):.4f}")


